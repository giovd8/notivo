version: '3.8'

services:
  # Nginx temporaneo per generazione certificati
  nginx-init:
    image: nginx:1.27-alpine
    container_name: nginx-init
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.init.conf:/etc/nginx/conf.d/default.conf:ro
      - certbot-webroot:/var/www/certbot
    depends_on:
      - frontend
      - gateway
    command: nginx -g 'daemon off;'

  # Nginx con certificati SSL
  nginx:
    image: nginx:1.27-alpine
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.init.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/nginx.prod.conf:/etc/nginx/conf.d/nginx.prod.conf:ro
      - certbot-webroot:/var/www/certbot
      - letsencrypt:/etc/letsencrypt
    depends_on:
      - frontend
      - gateway
      - certbot
    command: >
      sh -c "
      echo 'Waiting for certificates to be ready...';
      while [ ! -f /etc/letsencrypt/live/notivo.giovannividotto.it/fullchain.pem ]; do
        echo 'Certificates not ready, waiting...';
        sleep 5;
      done;
      echo 'Certificates found, stopping nginx-init and switching to SSL config';
      docker stop nginx-init || true;
      cp /etc/nginx/conf.d/nginx.prod.conf /etc/nginx/conf.d/default.conf;
      nginx -g 'daemon off;'"

  # Certbot per generare/rinnovare certificati SSL
  certbot:
    image: certbot/certbot:latest
    container_name: certbot
    restart: unless-stopped
    depends_on:
      - nginx-init
    volumes:
      - certbot-webroot:/var/www/certbot
      - letsencrypt:/etc/letsencrypt
    environment:
      - FRONTEND_DOMAIN=notivo.giovannividotto.it
      - LETSENCRYPT_EMAIL=your-email@example.com
    entrypoint: >
      sh -c "
      echo 'Waiting for nginx-init to be ready...';
      sleep 10;
      if [ ! -f /etc/letsencrypt/live/notivo.giovannividotto.it/fullchain.pem ]; then
        echo 'Generating SSL certificates...';
        certbot certonly --webroot -w /var/www/certbot -d notivo.giovannividotto.it --email your-email@example.com --agree-tos --non-interactive;
        echo 'Certificates generated!';
      else
        echo 'Certificates already exist';
      fi;
      echo 'Starting certificate renewal loop...';
      while :; do 
        certbot renew --webroot -w /var/www/certbot --quiet; 
        sleep 12h; 
      done"

  # Frontend Angular
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    image: notivo-frontend:prod
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"] 
      interval: 30s
      retries: 3

  # Gateway
  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile.prod
    image: notivo-gateway:prod
    environment:
      - NODE_ENV=production
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - AUTH_SERVICE_URL=http://auth-service:3001
      - USERS_SERVICE_URL=http://users-service:3002
      - NOTES_SERVICE_URL=http://notes-service:3003
      - CORS_ORIGIN=https://${FRONTEND_DOMAIN}
    volumes:
      - ./gateway/swagger.yaml:/app/swagger.yaml:ro
    depends_on:
      - auth-service
      - users-service
      - notes-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      retries: 3

  # Auth Service
  auth-service:
    build:
      context: ./services/auth
      dockerfile: Dockerfile.prod
    image: notivo-auth:prod
    environment:
      - NODE_ENV=production
    env_file: .env
    depends_on:
      - postgres
      - mongo
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      retries: 3

  # Users Service
  users-service:
    build:
      context: ./services/users
      dockerfile: Dockerfile.prod
    image: notivo-users:prod
    environment:
      - NODE_ENV=production
    env_file: .env
    depends_on:
      - postgres
      - mongo
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      retries: 3

  # Notes Service
  notes-service:
    build:
      context: ./services/notes
      dockerfile: Dockerfile.prod
    image: notivo-notes:prod
    environment:
      - NODE_ENV=production
    env_file: .env
    depends_on:
      - postgres
      - mongo
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      retries: 3

  # Postgres
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: notivo
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER"]
      interval: 30s
      retries: 5

  # Mongo
  mongo:
    image: mongo:7
    environment:
      MONGO_INITDB_ROOT_USERNAME: user
      MONGO_INITDB_ROOT_PASSWORD: pass
    volumes:
      - mongo_data:/data/db
      - ./database/mongo/init.js:/docker-entrypoint-initdb.d/init.js:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "mongo --username $MONGO_USER --password $MONGO_PASSWORD --eval 'db.adminCommand(\"ping\")'"]
      interval: 30s
      retries: 5

volumes:
  postgres_data:
  mongo_data:
  certbot-webroot:
  letsencrypt: